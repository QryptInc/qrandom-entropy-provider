package com.qrypt.qrandom.bcprov;

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.security.SecureRandom;
import java.security.Security;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

public class ChainedEntropyUnitTests {

    @BeforeAll
    static void setup() {

        System.setProperty("qrypt.api.url", "https://api-eus.qrypt.com/api/v1/entropy");
        System.setProperty("qrypt.api.token", "xxxxxxx");

        // Before all tests, set up the entropy source property and insert the Bouncy Castle provider
        System.setProperty("org.bouncycastle.drbg.entropysource",
                "com.qrypt.qrandom.bcprov.ChainedEntropySourceProvider");
        Security.insertProviderAt(new BouncyCastleProvider(), 1);
    }

    @Test
    public void testBouncyCastleProviderIsAdded() {
        // Verify that the Bouncy Castle provider was added correctly
        assertTrue(Security.getProvider("BC") != null, "Bouncy Castle provider should be registered");
        assertEquals("BouncyCastle Security Provider v1.69", Security.getProvider("BC").getInfo());
    }

    @Test
    public void testSecureRandomInstanceCreation() throws Exception {
        // Attempt to create a SecureRandom instance and ensure it's not null
        SecureRandom secureRandom = SecureRandom.getInstance("DEFAULT", "BC");
        assertNotNull(secureRandom, "SecureRandom instance should not be null");
        assertEquals("DEFAULT", secureRandom.getAlgorithm(), "SecureRandom algorithm should be 'DEFAULT'");
        assertEquals("BC", secureRandom.getProvider().getName(), "Provider should be Bouncy Castle (BC)");
    }

    @Test
    public void testRandomBytesGeneration() throws Exception {
        // Generate random bytes and ensure they are generated correctly
        SecureRandom secureRandom = SecureRandom.getInstance("DEFAULT", "BC");

        byte[] randomBytes = new byte[32];
        secureRandom.nextBytes(randomBytes);

        assertNotNull(randomBytes, "Generated random bytes should not be null");
        assertEquals(32, randomBytes.length, "Random byte array should have a length of 32");

        // Verify that the generated bytes are not all zeros
        boolean allZeroes = Arrays.equals(randomBytes, new byte[32]);
        assertFalse(allZeroes, "Generated bytes should not all be zero");
    }
}